[[Appendix]]

== Apendix

[[install-configure-JDK]]


===Java Development Kit (JDK): Installing, Configuring and Running


		The ${platform.name} Platform is written in Java; therefore, before running any ${platform.name} server, you must have a working Java Runtime Environment (JRE) or Java Development Kit (JDK) installed on your system. In addition, the JRE or JDK you are using to run ${platform.name} must be version 5 or higherfootnote:[
			At this point in time, it is possible to run most ${platform.name} servers, such as the JAIN SLEE Server, using a Java 6 JRE or JDK. Be aware, however, that presently the XML Document Management Server does not run on Java 6. We suggest checking the ${platform.name} web site, forums or discussion pages if you need to inquire about the status of running the XML Document Management Server with Java 6.
		].
	

[[JRE-or-JDK-32Bit-or-64Bit]]


==== JRE versus JDK - 32-Bit versus 64-Bit

*Should I Install the JRE or JDK?* 
			Although you can run ${platform.name} servers using the Java Runtime Environment, we assume that most users are developers interested in developing Java-based, ${platform.name}-driven solutions. Therefore, in this guide we take the tact of showing how to install the full Java Development Kit.
		



*Should I Install the 32-Bit or the 64-Bit JDK, and Does It Matter?* 
			Briefly stated: if you are running on a 64-Bit Linux or Windows platform, you should consider installing and running the 64-bit JDK over the 32-bit one. Here are some heuristics for determining whether you would rather run the 64-bit Java Virtual Machine (JVM) over its 32-bit cousin for your application:
		




* 
				Wider datapath: the pipe between RAM and CPU is doubled, which improves the performance of memory-bound applications when using a 64-bit JVM.
			


* 
				64-bit memory addressing gives virtually unlimited (1 exabyte) heap allocation. However large heaps affect garbage collection.
			


* 
				Applications that run with more than 1.5 GB of RAM (including free space for garbage collection optimization) should utilize the 64-bit JVM.
			


* 
				Applications that run on a 32-bit JVM and do not require more than minimal heap sizes will gain nothing from a 64-bit JVM. Barring memory issues, 64-bit hardware with the same relative clock speed and architecture is not likely to run Java applications faster than their 32-bit cousin.
			


		Note that the following instructions detail how to download and install the 32-bit JDK, although the steps are nearly identical for installing the 64-bit version.
	

[[Downloading-JDK]]


====Downloading JDK 

** 

++++++++++++++++++++++++++++++++++++++
<!-- id="jdkicar-binary-Java_Development_Kit-Downloading"> -->
++++++++++++++++++++++++++++++++++++++
    

			You can download the Sun JDK 5.0 (Java 2 Development Kit) from Sun's website: link:$$http://java.sun.com/javase/downloads/index_jdk5.jsp$$[]. Click on the Download link next to "JDK 5.0 Update __++&lt;x&gt;++__" (where __++&lt;x&gt;++__ is the latest minor version release number). On the next page, select your language and platform (both architecture—whether 32- or 64-bit—and operating system), read and agree to the ++Java Development Kit 5.0 License Agreement++, and proceed to the download page.
		




		The Sun website will present two download alternatives to you: one is an RPM inside a self-extracting file (for example, __$$jdk-1_5_0_16-linux-i586-rpm.bin$$__), and the other is merely a self-extracting file (e.g. __$$jdk-1_5_0_16-linux-i586.bin$$__). If you are installing the JDK on Red Hat Enterprise Linux, Fedora, or another RPM-based Linux system, we suggest that you download the self-extracting file containing the RPM package, which will set up and use the SysV service scripts in addition to installing the JDK. We also suggest installing the self-extracting RPM file if you will be running ${platform.name} in a production environment.
	

*Installing* 

++++++++++++++++++++++++++++++++++++++
<!-- id="jdkicar-binary-Java_Development_Kit-Installing"> -->
++++++++++++++++++++++++++++++++++++++
    

			The following procedures detail how to install the Java Development Kit on both Linux and Windows.
		



Installing the JDK on Linux
				Regardless of which file you downloaded, you can install it on Linux by simply making sure the file is executable and then running it:
			



++++++++++++++++++++++++++++++++++++++
<!--  ~]$ chmod +x "jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"
~]$ ./"jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"  -->
++++++++++++++++++++++++++++++++++++++
    

----
~]$ chmod +x "jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"
~]$ ./"jdk-1_5_0_<minor_version>-linux-<architecture>-rpm.bin"
----


[NOTE]
.Moving from Non-RPM Installer to SysV Service Scripts
====

			If you download the non-RPM self-extracting file (and installed it), and you are running on an RPM-based system, you can still set up the SysV service scripts by downloading and installing one of the ++-compat++ packages from the JPackage project. Remember to download the ++-compat++ package which corresponds correctly to the minor release number of the JDK you installed. The compat packages are available from link:$$ftp://jpackage.hmdc.harvard.edu/JPackage/1.7/generic/RPMS.non-free/$$[].
		

====



[IMPORTANT]
====

			You do not need to install a ++-compat++ package in addition to the JDK if you installed the self-extracting RPM file! The ++-compat++ package merely performs the same SysV service script set up that the RPM version of the JDK installer does.
		

====


[[install-JDK-on-windows]]


====Installing JDK on Windows


				Using Explorer, simply double-click the downloaded self-extracting installer and follow the instructions to install the JDK.
			

*Configuring* 

++++++++++++++++++++++++++++++++++++++
<!-- id="jdkicar-binary-Java_Development_Kit-Configuring"> -->
++++++++++++++++++++++++++++++++++++++
    

			Configuring your system for the JDK consists in two tasks: setting the JAVA_HOME environment variable, and ensuring that the system is using the proper JDK (or JRE) using the __alternatives__ command. Setting JAVA_HOME usually overrides the values for __java__, __javac__ and __$$java_sdk_1.5.0$$__ in __alternatives__, but we will set them all just to be safe and consistent.
		



[[setting-ENV-linux]]


====Setting Linux JAVA_HOME Environment Variables 

Setting the JAVA_HOME Environment Variable on Generic Linux:: 
					After installing the JDK, you must ensure that the JAVA_HOME environment variable exists and points to the location of your JDK installation.
				
*Setting the JAVA_HOME Environment Variable on Linux* +

						You can determine whether JAVA_HOME is set on your system by __echo__ing it on the command line:
					





++++++++++++++++++++++++++++++++++++++
<!--  ~]$ echo $JAVA_HOME  -->
++++++++++++++++++++++++++++++++++++++
    

+
----
~]$ echo $JAVA_HOME
----
+

					If JAVA_HOME is not set already, then you must set its value to the location of the JDK installation on your system. You can do this by adding two lines to your personal __$$~/.bashrc$$__ configuration file. Open __$$~/.bashrc$$__ (or create it if it doesn't exist) and add a line similar to the following one anywhere inside the file:
				

+
----
export JAVA_HOME="/usr/lib/jvm/jdk1.5.0_<version>"

----
+

					You should also set this environment variable for any other users who will be running ${platform.name} (any environment variables __export__ed from __$$~/.bashrc$$__ files are local to that user).
				

[[setting-correct-java-version]]


====Setting the Correct Java Version 

Setting java, javac and java_sdk_1.5.0 Using the __alternatives__ command:: *Selecting the Correct System JVM on Linux using alternatives
					* +

						On systems with the __alternatives__ command, including Red Hat Enterprise Linux and Fedora, you can easily choose which JDK (or JRE) installation you wish to use, as well as which __java__ and __javac__ executables should be run when called.
					



+

					__As the root user__, call __/usr/sbin/alternatives__ with the --config java option to select between JDKs and JREs installed on your system:
				

+
[listing]
....
root@localhost ~]$ /usr/sbin/alternatives --config java

There are 3 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
   1           /usr/lib/jvm/jre-1.5.0-gcj/bin/java
   2           /usr/lib/jvm/jre-1.6.0-sun/bin/java
*+ 3         /usr/lib/jvm/jre-1.5.0-sun/bin/java


Enter to keep the current selection[+], or type selection number:

....
+

					In our case, we want to use the Sun JDK, version 5, that we downloaded and installed, to run the __java__ executable. In the __alternatives__ information printout above, a plus (++$$+$$++) next to a number indicates the one currently being used. As per __alternatives__' instructions, pressing Enter will simply keep the current JVM, or you can enter the number corresponding to the JVM you would prefer to use.
				
+

					Repeat the procedure above for the __javac__ command and the ++$$java_sdk_1.5.0$$++ environment variable, __as the root user__:
				

+
----
~]$ /usr/sbin/alternatives --config javac
----

+
----
~]$ /usr/sbin/alternatives --config java_sdk_1.5.0
----
[[setting-ENV-windows]]


====Setting JAVA_HOME Environment Variables on Windows

Setting the JAVA_HOME Environment Variable on Windows:: 
					For information on how to set environment variables in Windows, refer to link:$$http://support.microsoft.com/kb/931715$$[].
				

[[install-JDK-linux-windows]]


==== Uninstalling JDK on Linux and Windows

*Uninstalling* 

++++++++++++++++++++++++++++++++++++++
<!-- id="jdkicar-binary-Java_Development_Kit-Uninstalling"> -->
++++++++++++++++++++++++++++++++++++++
    

			There is usually no reason (other than space concerns) to remove a particular JDK from your system, given that you can switch between JDKs and JREs easily using __alternatives__, and/or by setting JAVA_HOME.
		



*Uninstalling the JDK on Linux* 
			On RPM-based systems, you can uninstall the JDK using the __$$yum remove &lt;jdk_rpm_name&gt; $$__ command.
		



*Uninstalling the JDK on Windows* 
			On Windows systems, check the JDK entry in the ++Start++ menu for an uninstall command, or use ++Add/Remove Programs++.
		



[[setting-jboss-ENV-variable-windows-unix]]


====Setting the JBOSS_HOME Environment Variable


		The ${platform.name} Platform (${platform.name}) is built on top of the JBoss Application Server (JBoss AS). You do not need to set the JBOSS_HOME environment variable to run any of the ${platform.name} Platform servers __unless__ JBOSS_HOME is __already__ set.
	

The best way to know for sure whether JBOSS_HOME was set previously or not is to perform a simple check which may save you time and frustration.

*Checking to See If JBOSS_HOME is Set on Unix* At the command line, __echo__
			**`$JBOSS_HOME`** to see if it is currently defined in your environment:




----
~]$ echo $JBOSS_HOME
----

The ${platform.name} Platform and most ${platform.name} servers are built on top of the JBoss Application Server (JBoss AS). When the ${platform.name} Platform or ${platform.name} servers are built __from source__, then JBOSS_HOME __must__ be set, because the ${platform.name} files are installed into (or "over top of" if you prefer) a clean JBoss AS installation, and the build process assumes that the location pointed to by the JBOSS_HOME environment variable at the time of building is the JBoss AS installation into which you want it to install the ${platform.name} files.
	

This guide does not detail building the ${platform.name} Platform or any ${platform.name} servers from source. It is nevertheless useful to understand the role played by JBoss AS and JBOSS_HOME in the ${platform.name} ecosystem.


		The immediately-following section considers whether you need to set JBOSS_HOME at all and, if so, when. The subsequent sections detail how to set JBOSS_HOME on Unix and Windows
	


[IMPORTANT]
====

			Even if you fall into the category below of __not needing__ to set JBOSS_HOME, you may want to for various reasons anyway. Also, even if you are instructed that you do __not need__ to set JBOSS_HOME, it is good practice nonetheless to check and make sure that JBOSS_HOME actually __isn't__ set or defined on your system for some reason. This can save you both time and frustration.
		

====


You __DO NOT NEED__ to set JBOSS_HOME if...
* 
				...you have installed the ${platform.name} Platform binary distribution.
			


* 
				...you have installed a ${platform.name} server binary distribution __which bundles JBoss AS.__
			

You __MUST__ set JBOSS_HOME if...
* 
				...you are installing the ${platform.name} Platform or any of the ${platform.name} servers __from source__.
			


* 
				...you are installing the ${platform.name} Platform binary distribution, or one of the ${platform.name} server binary distributions, which __do not__ bundle JBoss AS.
			


		Naturally, if you installed the ${platform.name} Platform or one of the ${platform.name} server binary releases which __do not__ bundle JBoss AS, yet requires it to run, then you should link:$$http://docs.jboss.org/jbossas/docs/Installation_And_Getting_Started_Guide/5/html_single/index.html$$[install JBoss AS ] before setting JBOSS_HOME or proceeding with anything else.
	

*Setting the JBOSS_HOME Environment Variable on Unix* 
			The JBOSS_HOME environment variable must point to the directory which contains all of the files for the ${platform.name} Platform or individual ${platform.name} server that you installed. As another hint, this topmost directory contains a __bin__ subdirectory.
		




		Setting JBOSS_HOME in your personal __$$~/.bashrc$$__ startup script carries the advantage of retaining effect over reboots. Each time you log in, the environment variable is sure to be set for you, as a user. On Unix, it is possible to set JBOSS_HOME as a system-wide environment variable, by defining it in __/etc/bashrc__, but this method is neither recommended nor detailed in these instructions.
	

To Set JBOSS_HOME on Unix...
				Open the __$$~/.bashrc$$__ startup script, which is a hidden file in your home directory, in a text editor, and insert the following line on its own line while substituting for the actual install location on your system:
			



++++++++++++++++++++++++++++++++++++++
<!--  export JBOSS_HOME="/home/<replaceable>&lt;username&gt;</replaceable>/<replaceable>&lt;path&gt;</replaceable>/<replaceable>&lt;to&gt;</replaceable>/<replaceable>&lt;install_directory&gt;</replaceable>"  -->
++++++++++++++++++++++++++++++++++++++
    

----
export JBOSS_HOME="/home/<username>/<path>/<to>/<install_directory>"
----


				Save and close the __.bashrc__ startup script.
			


				You should __source__ the __.bashrc__ script to force your change to take effect, so that JBOSS_HOME becomes set for the current sessionfootnote:[
					Note that any other terminals which were opened prior to your having altered __.bashrc__ will need to __source__
						__$$~/.bashrc$$__ as well should they require access to JBOSS_HOME.
				].
			



++++++++++++++++++++++++++++++++++++++
<!--  ~]$ source ~/.bashrc  -->
++++++++++++++++++++++++++++++++++++++
    

----
~]$ source ~/.bashrc
----


				Finally, ensure that JBOSS_HOME is set in the current session, and actually points to the correct location:
			


[NOTE]
====

					The command line usage below is based upon a binary installation of the ${platform.name} Platform. In this sample output, JBOSS_HOME has been set correctly to the __++topmost_directory++__ of the ${platform.name} installation. Note that if you are installing one of the standalone ${platform.name} servers (with JBoss AS bundled!), then JBOSS_HOME would point to the __++topmost_directory++__ of your server installation.
				

====




++++++++++++++++++++++++++++++++++++++
<!--  ~]$ echo $JBOSS_HOME
/home/silas/&HOME_LIN;  -->
++++++++++++++++++++++++++++++++++++++
    

----
~]$ echo $JBOSS_HOME
/home/silas/${home.link}
----

*Setting the JBOSS_HOME Environment Variable on Windows* 
			The JBOSS_HOME environment variable must point to the directory which contains all of the files for the ${platform.name} Platform or individual ${platform.name} server that you installed. As another hint, this topmost directory contains a __bin__ subdirectory.
		




		For information on how to set environment variables in recent versions of Windows, refer to link:$$http://support.microsoft.com/kb/931715$$[].
	

[[setting-CATALINA_HOME-ENV-linux-windows]]


====Setting CATALINA_HOME on Linux and Windows

Setting the CATALINA_HOME Environment Variable on LinuxThe CATALINA_HOME environment variable must point to the location of your Tomcat installation. Any ${platform.name} server which runs on top of the Tomcat servlet container has a topmost directory, i.e. the directory in which you unzipped the zip file to install the server, and underneath that directory, a __bin__ directory. CATALINA_HOME must be set to the topmost directory of your ${platform.name} server installation.

Setting this variable in your personal __$$~/.bashrc$$__ file has the advantage that it will always be set (for you, as a user) each time you log in or reboot the system. To do so, open __$$~/.bashrc$$__ in a text editor (or create the file if it doesn't already exist) and insert the following line anywhere in the file, taking care to substitute __$$&lt;sip_server&gt;$$__ for the topmost directory of the ${platform.name} server you installed:


----
export CATALINA_HOME="/home/<username>/<path>/<to>/<sip_server>"
----

Save and close __.bashrc__.

You can—and should—__source__ your __.bashrc__ file to make your change take effect (so that CATALINA_HOME is set) for the current session:


----
~]$ source ~/.bashrc
----

Finally, make sure that CATALINA_HOME has been set correctly (that it leads to the right directory), and has taken effect in the current session.

The following command will show the path to the directory pointed to by CATALINA_HOME:


----
~]$ echo $CATALINA_HOME
----

To be absolutely sure, change your directory to the one pointed to by CATALINA_HOME:


----
~]$ cd $CATALINA_HOME && pwd
----

Setting the CATALINA_HOME Environment Variable on WindowsThe CATALINA_HOME environment variable must point to the location of your Tomcat installation. Any ${platform.name} server which runs on top of the Tomcat servlet container has a topmost directory, i.e. the directory in which you unzipped the zip file to install the server, and underneath that directory, a __bin__ directory. CATALINA_HOME must be set to the topmost directory of your ${platform.name} server installation.

If you are planning on running the Tomcat container as the Administrator, then you should, of course, set the CATALINA_HOME environment variable __as the administrator__, and if you planning to run Tomcat as a normal user, then set CATALINA_HOME as a user environment variable.

For information on how to set environment variables in Windows, refer to link:$$http://support.microsoft.com/kb/931715$$[].

